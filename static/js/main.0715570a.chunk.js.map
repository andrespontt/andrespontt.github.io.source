{"version":3,"sources":["../node_modules/jspdf/dist sync","components/UsaDashboard.js","components/ButtonAppBar.js","components/Pomodoro.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","UsaDashboard","useState","title","field","type","columns","data","setData","useEffect","fetch","then","res","json","result","console","log","region","classes","makeStyles","theme","root","minWidth","useStyles","className","options","pageSize","ButtonAppBar","AppBar","position","Toolbar","IconButton","edge","menuBUtton","color","aria-label","Typography","variant","justifyContent","Podomoro","Card","CardActionArea","CardMedia","component","height","image","autoCorrect","gutterBottom","align","CardActions","Button","size","Copyright","href","Date","getFullYear","flexGrow","menuButton","marginRight","spacing","createMuiTheme","palette","primary","main","grey","App","ThemeProvider","CssBaseline","Container","maxWidth","exact","path","Boolean","window","location","hostname","match","ReactGA","pageview","pathname","search","initialize","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0715570a.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 327;","import React, { useState, useEffect } from 'react';\nimport MaterialTable from 'material-table';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport default function UsaDashboard() {\n\n    const [columns] = useState(\n        [\n            { title: 'State', field: 'state' },\n            { title: 'Positive', field: 'positive', type: 'numeric' },\n            { title: 'Death', field: 'death', type: 'numeric' }\n        ]\n    );\n\n    const [data, setData] = useState(\n        [ { \"date\": 20200819, \"state\": \"AK\", \"positive\": 5247, \"negative\": 305602, \"pending\": null, \"hospitalizedCurrently\": 56, \"hospitalizedCumulative\": null, \"inIcuCurrently\": null, \"inIcuCumulative\": null, \"onVentilatorCurrently\": 6, \"onVentilatorCumulative\": null, \"recovered\": 1501, \"dataQualityGrade\": \"A\", \"lastUpdateEt\": \"8/19/2020 00:00\", \"dateModified\": \"2020-08-19T00:00:00Z\", \"checkTimeEt\": \"08/18 20:00\", \"death\": 29 } ]\n    );\n\n    useEffect(()=>{\n        fetch(\"https://raw.githubusercontent.com/andrespontt/data/master/covid-current.json\")\n        .then(res => res.json())\n        .then((result) => {\n            setData(result);\n        })\n        fetch(\"http://ip-api.com/json\")\n        .then(res =>res.json())\n        .then((result) => {\n            console.log(\"ip-api: \" + result.region)\n        })\n    },[]);\n\n    const useStyles = makeStyles(theme=>({\n        root: {\n            \"& .MTableToolbar-searchField-12 \": {\n                minWidth: \"50px\"\n            }\n        }\n    }));\n    const classes = useStyles();\n        \n\n    return (\n        <div className={classes.root}>\n            <MaterialTable\n            title=\"C19 - v2\"\n            columns={columns}\n            data={data}\n            options={{\n                pageSize: 5\n            }}\n        />\n        </div>\n        \n    );\n}\n","import React from 'react';\nimport { Typography, AppBar, Toolbar, IconButton } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { useStyles } from '../App';\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuBUtton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            \n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n\n}\n","import React from 'react';\nimport { Card, CardActionArea, CardMedia, Typography, CardActions, Button, makeStyles } from '@material-ui/core';\n\n\nconst useStyles = makeStyles({\n    root: {\n        justifyContent: 'center'\n    }\n        \n});\n\nexport default function Podomoro() {\n\n    const classes = useStyles();\n    \n\n    return (\n        <Card>\n            <CardActionArea className={classes.root}>\n                <CardMedia\n                    component=\"img\"\n                    height=\"140\"\n                    image=\"img/tomato2-bg.jpg\"\n                    title=\"tomato\"\n                    autoCorrect\n\n                />\n                    <Typography gutterBottom align=\"center\" variant=\"h1\" component=\"h1\">\n                        26:00\n                    </Typography>\n                \n            </CardActionArea>\n            < CardActions align=\"center\" className={classes.root}>\n                    <Button size=\"large\" align=\"center\" color=\"default\">\n                        Start\n                    </Button>\n                    <Button size=\"large\" color=\"default\">\n                        Stop\n                    </Button>\n                </CardActions>\n        </Card>\n    );\n\n}","import React from 'react';\nimport './App.css';\nimport { Typography, createMuiTheme, CssBaseline, Container, makeStyles } from '@material-ui/core';\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport UsaDashboard from './components/UsaDashboard';\nimport { Switch, Route, Link, BrowserRouter as Router } from \"react-router-dom\";\nimport ButtonAppBar from './components/ButtonAppBar';\nimport grey from '@material-ui/core/colors/grey';\nimport Podomoro from './components/Pomodoro';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'MIT License Â© - Andres Pontt'}\n      <Link color=\"inherit\" href=\"https://material-ui.com\" />\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}))\n\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: grey[900]\n    }\n  }\n});\n\nfunction App() {\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Container maxWidth={false}>\n          <ButtonAppBar />\n          <Switch >\n            <Route exact path=\"/\">\n              <Podomoro />\n            </Route>\n            <Route path=\"/c19/\">\n              <UsaDashboard/>\n            </Route>\n          </Switch>\n          <Copyright />\n        </Container>\n      </ThemeProvider>\n    </Router>\n  );\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ReactGA from 'react-ga';\n\nReactGA.pageview(window.location.pathname + window.location.search);\n\n\nconst trackingId = \"UA-175881992-1\"; // Replace with your Google Analytics tracking ID\nReactGA.initialize(trackingId);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}